
R version 2.7.1 (2008-06-23)
Copyright (C) 2008 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> require("RItools")
Loading required package: RItools
Package SparseM (0.78) loaded.  To cite, see citation("SparseM")
> 
> data(nuclearplants)
> 
> ##################################################
> ### Basic uses
> ##################################################
> xBalance(pr~ date + t1 + t2 + cap + ne + ct + bw + cum.n, 
+          ~factor(pt), nuclearplants, chisq=FALSE)
      pre.difference pre.sig post.difference post.sig
date       -0.114680                0.095009         
t1          0.106300                0.278720         
t2          1.032700     *          0.989430      *  
cap         0.340120                0.350390         
ne         -0.163120               -0.052160         
ct         -0.307970               -0.220130         
bw          0.045114               -0.115410         
cum.n      -0.097597               -0.127550         
> xBalance(pr~.-cost-pt, ~factor(pt), nuclearplants, chisq=FALSE)
      pre.difference pre.sig post.difference post.sig
date       -0.114680                0.095009         
t1          0.106300                0.278720         
t2          1.032700     *          0.989430      *  
cap         0.340120                0.350390         
ne         -0.163120               -0.052160         
ct         -0.307970               -0.220130         
bw          0.045114               -0.115410         
cum.n      -0.097597               -0.127550         
> 
> xBalance(pr~ date + t1 + t2 + cap + ne + ct + bw + cum.n, 
+          ~factor(pt), nuclearplants, chisq=TRUE)
      pre.difference pre.sig post.difference post.sig
date       -0.114680                0.095009         
t1          0.106300                0.278720         
t2          1.032700     *          0.989430      *  
cap         0.340120                0.350390         
ne         -0.163120               -0.052160         
ct         -0.307970               -0.220130         
bw          0.045114               -0.115410         
cum.n      -0.097597               -0.127550         
Pre:  X-squared = 11.463, df = 8, p-value = 0.17683
Post: X-squared = 10.775, df = 8, p-value = 0.21479
> (b0 <- xBalance(pr~ date + t1 + t2 + cap + ne + ct + bw + cum.n,
+                 ~factor(pt), nuclearplants, chisq=TRUE))
      pre.difference pre.sig post.difference post.sig
date       -0.114680                0.095009         
t1          0.106300                0.278720         
t2          1.032700     *          0.989430      *  
cap         0.340120                0.350390         
ne         -0.163120               -0.052160         
ct         -0.307970               -0.220130         
bw          0.045114               -0.115410         
cum.n      -0.097597               -0.127550         
Pre:  X-squared = 11.463, df = 8, p-value = 0.17683
Post: X-squared = 10.775, df = 8, p-value = 0.21479
> ##################################################
> 
> 
> ##################################################
> ### Test balance on v-bles one at a time.
> ##################################################
>  xBalance(pr~ date, ~factor(pt), nuclearplants, chisq=TRUE)
     pre.difference pre.sig post.difference post.sig
date       -0.11468                0.095009         
Pre:  X-squared = 0.093157, df = 1, p-value = 0.7602
Post: X-squared = 0.085424, df = 1, p-value = 0.77008
> 
> ##################################################
> ### Factor handling
> ##################################################
> a0 <- xBalance(pr~ date + t1 + t2 + cap + CUM.N, 
+                ~factor(pt),
+                data.frame(nuclearplants,
+                           CUM.N=cut(nuclearplants$cum.n, c(0,2,5,21), include=TRUE)),
+                chisq=FALSE)
> xBalance(pr~ date + t1 + t2 + cap + CUM.N, 
+          ~factor(pt),
+          data.frame(nuclearplants,
+                     CUM.N=cut(nuclearplants$cum.n, c(0,2,5,21), include=TRUE)),
+          chisq=TRUE)
            pre.difference pre.sig post.difference post.sig
date             -0.114680                0.095009         
t1                0.106300                0.278720         
t2                1.032700     *          0.989430      *  
cap               0.340120                0.350390         
CUM.N[0,2]       -0.063907                0.040871         
CUM.N(2,5]        0.045114                0.144260         
CUM.N(5,21]       0.017923               -0.149010         
Pre:  X-squared = 13.583, df = 6, p-value = 0.03466
Post: X-squared = 12.035, df = 6, p-value = 0.0612
> a1 <- xBalance(pr~ date + t1 + t2 + cap +
+                cut(cum.n, c(0,2,5,21), include=TRUE),
+                ~factor(pt),
+                nuclearplants, chisq=FALSE)
> attributes(a0) <- attributes(a1) <- NULL
> all.equal(a0,a1)
[1] TRUE
> ##################################################
> ### When there are NAs in the grouping variable and we're doing
> ### na.omit=TRUE, we don't want to omit rows with NA on
> ### the grouping before evaluating fmla.  For me this is of concern
> ### when fmla has a call to ns() in it, but it's easier to test the issue
> ### using rank() (-BH)
> ##################################################
> nuclearplants$pt1 <- factor(nuclearplants$pt)
> nuclearplants$pt1[1:3] <- NA
> nuclearplants$rank.t1 <- rank(nuclearplants$t1)
> all.equal(nuclearplants$rank.t1[-(1:3)], rank(nuclearplants$t1[-(1:3)]))
[1] "Mean relative difference: 0.1334002"
> ### note that the above is not TRUE -- omitting changes the ranks
> b1 <- xBalance(pr~rank.t1+t2, ~pt1, data=nuclearplants, chisq=FALSE, na.rm=TRUE)[1,]
> b2 <- xBalance(pr~rank(t1)+t2, ~pt1, data=nuclearplants, chisq=FALSE, na.rm=TRUE)[1,]
> attributes(b1) <- attributes(b2) <- NULL
> all.equal(b2,b1)
[1] TRUE
> 
> ##################################################
> ### finding stratum variable that's in calling
> ### frame but not in data
> ##################################################
> mypt <- factor(nuclearplants$pt)
> all.equal(b0, xBalance(pr~date + t1 + t2 + cap + ne + ct + bw + cum.n,
+                        ~mypt, nuclearplants, chisq=TRUE))
[1] TRUE
> ##################################################
> ### * Handling stratum weights                 ###
> ##################################################
> ### ** Default weightings should evaluate before NAs are removed,
> ### in my view.  (Note that this will require some re-coding, even before
> ### nonstandard weighting functionality is added.  However, that
> ### same re-coding ought to streamline integration of the new functionality.)
> b3 <- xBalance(pr~ifelse(pt,rank.t1,0)+t2, ~factor(pt), data=nuclearplants, chisq=FALSE, na.rm=TRUE)[1,c(2,4)]
> b4 <- xBalance(pr~ifelse(pt,rank.t1,0)+pt1, ~factor(pt), data=nuclearplants, chisq=FALSE, na.rm=TRUE)[1,c(2,4)]
> attributes(b3) <- attributes(b4) <- NULL
> all.equal(b3, b4) # Should be TRUE
[1] TRUE
> 
> ### ** Provided they're all nonnegative, they shouldn't
> ### have to sum to 1.  Ie, the function should handle the re-normalizing.
> (my.hmnic.wts <- tapply(nuclearplants$pr, nuclearplants$pt,
+                         function(x) {1/(1/sum(x) + 1/sum(!x))}) )
       0        1 
5.115385 1.500000 
> identical(b0,
+           xBalance(pr~date + t1 + t2 + cap + ne + ct + bw + cum.n,
+                    ~factor(pt), nuclearplants, chisq=TRUE,
+                    stratum.weights=my.hmnic.wts) )
[1] FALSE
> 
> ### **... unless user specifies "normalize.weights=FALSE"!  (For group-level
> ### assmt, users may want to work with group-aggregated covariates while folding
> ### de-aggregation into the weights.)
> ##  NEED TEST HERE
> 
> ### ** If stratum.weights is a function, it should
> ### find v-bles within its data argument.
> pr <- nuclearplants$pr ; pr[which.max(pr)] <- 0 
> (not.hmnic.wts <- tapply(pr, nuclearplants$pt,
+                         function(x) {1/(1/sum(x) + 1/sum(!x))}) )
       0        1 
4.615385 1.500000 
> identical(b0, # This should be FALSE
+           xBalance(pr~date + t1 + t2 + cap + ne + ct + bw + cum.n,
+                    ~factor(pt), nuclearplants, chisq=TRUE,
+                    stratum.weights=not.hmnic.wts) )
[1] FALSE
> identical(b0, # Whereas this should be TRUE, if evaluation happens properly
+           xBalance(pr~date + t1 + t2 + cap + ne + ct + bw + cum.n,
+                    ~factor(pt), nuclearplants, chisq=TRUE,
+                    stratum.weights=function(data){tapply(data$pr, data$pt,
+                      function(x) {1/(1/sum(x) + 1/sum(!x))})} ) )
[1] FALSE
> 
> ### ** If stratum.weights is a function, its
> ### evaluation should within xBalance's 
> ### parent frame for objects.
> PT <- nuclearplants$pt
> identical(b0, # Should be TRUE
+           xBalance(pr~date + t1 + t2 + cap + ne + ct + bw + cum.n,
+                    ~factor(pt), nuclearplants, chisq=TRUE,
+                    stratum.weights=function(data){tapply(data$pr, PT,
+                      function(x) {1/(1/sum(x) + 1/sum(!x))})} ) )
[1] FALSE
> 
> ### ** If stratum.weights is function to be evaluated within
> ### data, then it needs to evaluate before na's are removed. (IMHO. -BH)
> 
> ### ** If stratum.weights is not a function, require it to specify a nonnegative
> ### real number weight for each stratum in the reduced levels
> ### of groups. The following tries should fail.
> try(xBalance(pr~.-cost-pt, ~factor(pt), nuclearplants, chisq=TRUE,
+              stratum.weights=my.hmnic.wts[-1]) )
Error in xBalance(pr ~ . - cost - pt, ~factor(pt), nuclearplants, chisq = TRUE,  : 
  if stratum.weights is a vector, must have a name for each stratum
> try(xBalance(pr~.-cost-pt, ~factor(pt), nuclearplants, chisq=TRUE,
+              stratum.weights=c(NA,my.hmnic.wts[-1]) ))
Error in xBalance(pr ~ . - cost - pt, ~factor(pt), nuclearplants, chisq = TRUE,  : 
  if stratum.weights is a vector, must have a name for each stratum
> try(xBalance(pr~.-cost-pt, ~factor(pt), nuclearplants, chisq=TRUE,
+              stratum.weights=-my.hmnic.wts) )
Error in xBalance(pr ~ . - cost - pt, ~factor(pt), nuclearplants, chisq = TRUE,  : 
  stratum weights must be nonnegative
> try(xBalance(pr~.-cost-pt, ~factor(pt), nuclearplants, chisq=TRUE,
+              stratum.weights=unlist(list('0'='a', '1'='b')) ) )
Error in xBalance(pr ~ . - cost - pt, ~factor(pt), nuclearplants, chisq = TRUE,  : 
  stratum.weights must be an expression or numeric vector
> 
> ### Non-binary "treatment" variable.
> xBalance(cost~ date + t1 + t2 + cap + ne + ct + bw + cum.n, 
+          ~factor(pt), nuclearplants, chisq=FALSE)
      pre.difference pre.sig post.difference post.sig
date      3.5300e-03     ***      0.00275860      *  
t1        2.6399e-03     *        0.00196490         
t2        3.1947e-05              0.00095886         
cap       2.7280e-03     **       0.00417220      ** 
ne        2.1896e-03     *        0.00190100         
ct        1.2666e-03              0.00072164         
bw       -7.7717e-04              0.00078874         
cum.n     1.5913e-03              0.00272850      .  
> 
> xBalance(cost~ date + t1 + t2 + cap + ne + ct + bw + cum.n, 
+          ~factor(pt), nuclearplants, chisq=TRUE)
      pre.difference pre.sig post.difference post.sig
date      3.5300e-03     ***      0.00275860      *  
t1        2.6399e-03     *        0.00196490         
t2        3.1947e-05              0.00095886         
cap       2.7280e-03     **       0.00417220      ** 
ne        2.1896e-03     *        0.00190100         
ct        1.2666e-03              0.00072164         
bw       -7.7717e-04              0.00078874         
cum.n     1.5913e-03              0.00272850      .  
Pre:  X-squared = 24.949, df = 8, p-value = 0.00159
Post: X-squared = 19.276, df = 8, p-value = 0.01345
> 
> xBalance(cost~ date + t1 + t2 + cap + ne + ct + bw + cum.n, 
+          ~factor(pt), nuclearplants, chisq=TRUE,
+          stratum.weights=my.hmnic.wts)
      pre.difference pre.sig post.difference post.sig
date      3.5300e-03     ***      0.00323210      *  
t1        2.6399e-03     *       -0.00085750         
t2        3.1947e-05             -0.00061988         
cap       2.7280e-03     **       0.00516620      ***
ne        2.1896e-03     *        0.00148630         
ct        1.2666e-03              0.00256260         
bw       -7.7717e-04              0.00570980         
cum.n     1.5913e-03              0.00293300      *  
Pre:  X-squared = 24.949, df = 8, p-value = 0.00159
Post: X-squared = 21.682, df = 8, p-value = 0.00554
> 
> xBalance(cost~ date + t1 + t2 + cap + ne + ct + bw + cum.n, 
+          ~factor(pt), nuclearplants, chisq=TRUE,
+          stratum.weights=function(data){tapply(data$pr, data$pt,
+                      function(x) {1/(1/sum(x) + 1/sum(!x))})} )
      pre.difference pre.sig post.difference post.sig
date      3.5300e-03     ***      0.00323210      *  
t1        2.6399e-03     *       -0.00085750         
t2        3.1947e-05             -0.00061988         
cap       2.7280e-03     **       0.00516620      ***
ne        2.1896e-03     *        0.00148630         
ct        1.2666e-03              0.00256260         
bw       -7.7717e-04              0.00570980         
cum.n     1.5913e-03              0.00293300      *  
Pre:  X-squared = 24.949, df = 8, p-value = 0.00159
Post: X-squared = 21.682, df = 8, p-value = 0.00554
> 
> ##################################################
> ###        covariate.scaling                   ###
> ##################################################
> xBalance(pr~ date + t1 + t2 + cap + ne + ct + bw + cum.n,
+          ~factor(pt), nuclearplants, chisq=TRUE,
+          covariate.scaling=1)
      pre.difference pre.sig post.difference post.sig
date       -0.118180                0.097907         
t1          0.363640                0.953490         
t2          9.781800     *          9.372100      *  
cap        64.618000               66.570000         
ne         -0.072727               -0.023256         
ct         -0.154550               -0.110470         
bw          0.018182               -0.046512         
cum.n      -0.627270               -0.819770         
Pre:  X-squared = 11.463, df = 8, p-value = 0.17683
Post: X-squared = 10.775, df = 8, p-value = 0.21479
> b0[1:2,]
     pre.difference pre.sig post.difference post.sig
date       -0.11468                0.095009         
t1          0.10630                0.278720         
Pre:  X-squared = 11.463, df = 8, p-value = 0.17683
Post: X-squared = 10.775, df = 8, p-value = 0.21479
> 
> ##################################################
> ###   gracefully handle case of no strata w/   ###
> ###   variation in Tx group                    ###
> ##################################################
> xBalance(pr~ date + t1,
+          ~factor(pt), nuclearplants[c(1,32),], chisq=TRUE)
Pre:  X-squared = 0, df = 0, p-value = 0
Post: X-squared = 0, df = 0, p-value = 0
> 
> 
> ##################################################
> ###      PRINT JUST THE CHISQUARE TESTS        ###
> ##################################################
> b0[numeric(0),]
Pre:  X-squared = 11.463, df = 8, p-value = 0.17683
Post: X-squared = 10.775, df = 8, p-value = 0.21479
> 
> ##################################################
> ###               CHISQ="only"                 ###
> ##################################################
> xBalance(pr~ date + t1 + t2 + cap + ne + ct + bw + cum.n,
+                 ~factor(pt), nuclearplants, chisq='only')
Pre:  X-squared = 11.463, df = 8, p-value = 0.17683
Post: X-squared = 10.775, df = 8, p-value = 0.21479
> 
> ##################################################
> ###               xtable method                ###
> ##################################################
> if (require('xtable'))
+   {
+ xtable(xBalance(pr~ date + t1 + t2 + cap + ne + ct + bw + cum.n,
+                 ~factor(pt), nuclearplants)
+        )
+ xtable(b0)    
+   }
Loading required package: xtable
% latex table generated in R 2.7.1 by xtable 1.5-2 package
% Sat Aug 16 22:33:47 2008
\begin{table}[ht]
\begin{center}
\begin{tabular}{rrlrl}
  \hline
 & pre.difference & pre.sig & post.difference & post.sig \\
  \hline
date & $-$0.11 &  & 0.10 &  \\
  t1 & 0.11 &  & 0.28 &  \\
  t2 & 1.03 & *   & 0.99 & *   \\
  cap & 0.34 &  & 0.35 &  \\
  ne & $-$0.16 &  & $-$0.05 &  \\
  ct & $-$0.31 &  & $-$0.22 &  \\
  bw & 0.05 &  & $-$0.12 &  \\
  cum.n & $-$0.10 &  & $-$0.13 &  \\
   \hline
\end{tabular}
\end{center}
\end{table}
> 
> 
> ##################################################
> ###               include.means                ###
> ##################################################
> xBalance(pr~ date + t1 + t2 + cap + ne + ct + bw + cum.n, 
+          ~factor(pt), nuclearplants, chisq=FALSE,
+          covariate.scaling=1, include.means=TRUE)
      pre.Tx.eq.0 pre.Tx.eq.1 pre.difference pre.sig post.Tx.eq.0 post.Tx.eq.1
date     68.61800        68.5      -0.118180             68.49200     68.59000
t1       13.63600        14.0       0.363640             13.39500     14.34900
t2       59.31800        69.1       9.781800     *       59.18000     68.55200
cap     805.18000       869.8      64.618000            806.45000    873.02000
ne        0.27273         0.2      -0.072727              0.24419      0.22093
ct        0.45455         0.3      -0.154550              0.44186      0.33140
bw        0.18182         0.2       0.018182              0.19767      0.15116
cum.n     8.72730         8.1      -0.627270              8.72090      7.90120
      post.difference post.sig
date         0.097907         
t1           0.953490         
t2           9.372100      *  
cap         66.570000         
ne          -0.023256         
ct          -0.110470         
bw          -0.046512         
cum.n       -0.819770         
> xBalance(pr~ date + t1 + t2 + cap + ne + ct + bw + cum.n, 
+          ~factor(pt), nuclearplants, chisq=FALSE, include.means=TRUE)
      pre.Tx.eq.0 pre.Tx.eq.1 pre.difference pre.sig post.Tx.eq.0 post.Tx.eq.1
date     68.61800        68.5      -0.114680             68.49200     68.59000
t1       13.63600        14.0       0.106300             13.39500     14.34900
t2       59.31800        69.1       1.032700     *       59.18000     68.55200
cap     805.18000       869.8       0.340120            806.45000    873.02000
ne        0.27273         0.2      -0.163120              0.24419      0.22093
ct        0.45455         0.3      -0.307970              0.44186      0.33140
bw        0.18182         0.2       0.045114              0.19767      0.15116
cum.n     8.72730         8.1      -0.097597              8.72090      7.90120
      post.difference post.sig
date         0.095009         
t1           0.278720         
t2           0.989430      *  
cap          0.350390         
ne          -0.052160         
ct          -0.220130         
bw          -0.115410         
cum.n       -0.127550         
> 
> 
> ##################################################
> ###             WISHLIST                       ###
> ##################################################
> 
> 
> 
> 
